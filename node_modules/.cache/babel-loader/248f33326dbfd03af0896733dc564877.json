{"ast":null,"code":"var _jsxFileName = \"/home/nxtwave/react-hooks/sessions/making-api-call-with-hooks-part-2/src/components/Leaderboard/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Loader from 'react-loader-spinner';\nimport { LeaderboardContainer, LoadingViewContainer, ErrorMessage } from './styledComponents';\nimport LeaderboardTable from '../LeaderboardTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n  success: 'SUCCESS',\n  failure: 'FAILURE'\n};\n\nconst Leaderboard = () => {\n  _s();\n\n  const [apiResponse, setApiResponse] = useState({\n    status: apiStatusConstants.initial,\n    data: null,\n    errorMsg: null\n  }); //hooks method used to update staus, data and errorMsg\n\n  useEffect(() => {\n    const getLeaderboardData = async () => {\n      setApiResponse({\n        status: apiStatusConstants.inProgress,\n        data: null,\n        errorMsg: null\n      });\n      const url = 'https://apis.ccbp.in/leaderboard';\n      const options = {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MjMwNjU1MzJ9.D13s5wN3Oh59aa_qtXMo3Ec4wojOx0EZh8Xr5C5sRkU'\n        }\n      };\n      const response = await fetch(url, options);\n      const responseData = await response.json();\n\n      if (response.ok) {\n        const leaderboardData = responseData.leaderboard_data;\n        const formattedLeaderboardData = leaderboardData.map(eachData => ({\n          id: eachData.id,\n          language: eachData.language,\n          name: eachData.name,\n          profileImageUrl: eachData.profile_image_url,\n          rank: eachData.rank,\n          score: eachData.score,\n          timeSpent: eachData.time_spent\n        }));\n        setApiResponse(prevState => ({ ...prevState,\n          status: apiStatusConstants.success,\n          data: formattedLeaderboardData\n        }));\n      } else {\n        setApiResponse(prevState => ({ ...prevState,\n          status: apiStatusConstants.failure,\n          errorMsg: responseData.error_msg\n        }));\n      }\n    };\n\n    getLeaderboardData();\n  }, []);\n\n  const renderFailureView = () => {\n    const {\n      errorMsg\n    } = apiResponse;\n    return /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  };\n\n  const renderSuccessView = () => {\n    const {\n      data\n    } = apiResponse;\n    return /*#__PURE__*/_jsxDEV(LeaderboardTable, {\n      leaderboardData: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  };\n\n  const renderLoadingView = () => /*#__PURE__*/_jsxDEV(LoadingViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(Loader, {\n      type: \"ThreeDots\",\n      color: \"#ffffff\",\n      height: \"50\",\n      width: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n\n  const renderLeaderboard = () => {\n    const {\n      status\n    } = apiResponse;\n\n    switch (status) {\n      case apiStatusConstants.inProgress:\n        return renderLoadingView();\n\n      case apiStatusConstants.success:\n        return renderSuccessView();\n\n      case apiStatusConstants.failure:\n        return renderFailureView();\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(LeaderboardContainer, {\n    children: renderLeaderboard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Leaderboard, \"LcejUL5Z8gTq0/4EosyqIhBfGKM=\");\n\n_c = Leaderboard;\nexport default Leaderboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"names":["useState","useEffect","Loader","LeaderboardContainer","LoadingViewContainer","ErrorMessage","LeaderboardTable","apiStatusConstants","initial","inProgress","success","failure","Leaderboard","apiResponse","setApiResponse","status","data","errorMsg","getLeaderboardData","url","options","method","headers","Authorization","response","fetch","responseData","json","ok","leaderboardData","leaderboard_data","formattedLeaderboardData","map","eachData","id","language","name","profileImageUrl","profile_image_url","rank","score","timeSpent","time_spent","prevState","error_msg","renderFailureView","renderSuccessView","renderLoadingView","renderLeaderboard"],"sources":["/home/nxtwave/react-hooks/sessions/making-api-call-with-hooks-part-2/src/components/Leaderboard/index.js"],"sourcesContent":["import {useState, useEffect} from 'react'\nimport Loader from 'react-loader-spinner'\n\nimport {LeaderboardContainer, LoadingViewContainer, ErrorMessage} from './styledComponents'\nimport LeaderboardTable from '../LeaderboardTable'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n}\n\nconst Leaderboard = () => {\n  const [apiResponse, setApiResponse] = useState({\n    status: apiStatusConstants.initial,\n    data: null,\n    errorMsg: null,\n  })  //hooks method used to update staus, data and errorMsg\n\n  useEffect(() => {\n    const getLeaderboardData = async () => {\n      setApiResponse({\n        status: apiStatusConstants.inProgress,\n        data: null,\n        errorMsg: null,\n      })\n\n      const url = 'https://apis.ccbp.in/leaderboard'\n      const options = {\n        method: 'GET',\n        headers: {\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MjMwNjU1MzJ9.D13s5wN3Oh59aa_qtXMo3Ec4wojOx0EZh8Xr5C5sRkU',\n        },\n      }\n      const response = await fetch(url, options)\n      const responseData = await response.json()\n      if (response.ok) {\n        const leaderboardData = responseData.leaderboard_data\n        const formattedLeaderboardData = leaderboardData.map(eachData => ({\n          id: eachData.id,\n          language: eachData.language,\n          name: eachData.name,\n          profileImageUrl: eachData.profile_image_url,\n          rank: eachData.rank,\n          score: eachData.score,\n          timeSpent: eachData.time_spent,\n        }))\n        setApiResponse(prevState => ({\n          ...prevState,\n          status: apiStatusConstants.success,\n          data: formattedLeaderboardData,\n        }))\n      } else {\n        setApiResponse(prevState => ({\n          ...prevState,\n          status: apiStatusConstants.failure,\n          errorMsg: responseData.error_msg,\n        }))\n      }\n    }\n\n    getLeaderboardData()\n  }, [])\n\n  const renderFailureView = () => {\n    const {errorMsg} = apiResponse\n    return <ErrorMessage>{errorMsg}</ErrorMessage>\n  }\n\n  const renderSuccessView = () => {\n    const {data} = apiResponse\n\n    return <LeaderboardTable leaderboardData={data} />\n  }\n\n  const renderLoadingView = () => (\n    <LoadingViewContainer>\n      <Loader type='ThreeDots' color='#ffffff' height='50' width='50' />\n    </LoadingViewContainer>\n  )\n\n  const renderLeaderboard = () => {\n    const {status} = apiResponse\n\n    switch (status) {\n      case apiStatusConstants.inProgress:\n        return renderLoadingView()\n      case apiStatusConstants.success:\n        return renderSuccessView()\n      case apiStatusConstants.failure:\n        return renderFailureView()\n      default:\n        return null\n    }\n  }\n\n  return <LeaderboardContainer>{renderLeaderboard()}</LeaderboardContainer>\n}\n\nexport default Leaderboard\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}